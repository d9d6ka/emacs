;; -*- mode: lisp -*-

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

latex-mode

(document "\\documentclass[" p "]{" p "}" n n
          "\\usepackage{cmap}" n
          "\\usepackage[utf8]{inputenc}" n
          "\\usepackage[T2A,T1]{fontenc}" n
          "\\usepackage[english, russian]{babel}" n
          "\\usepackage{csquotes}" n n
          "\\title{" p "}" n n
          "\\begin{document}" n>
          "\\maketitle" n>
          r> n
          "\\end{document}")
(math "\\usepackage{amsmath}" n
      "\\usepackage{amsfonts}" n
      "\\usepackage{amssymb}" n
      "\\usepackage{amsthm}" n
      "\\usepackage{mathtools}")
(biblatex "\\usepackage[" n>
          "backend=biber," n>
          "style=gost-numeric," n>
          "maxbibnames=9," n>
          "maxcitenames=2," n>
          "uniquelist=false," n>
          "autolang=other," n>
          "sorting=nyt" n
          "]{biblatex}" n
          "\\bibliography{bibliography.bib}")
(hyperref "\\usepackage{hyperref}" n
          "\\hypersetup{" n>
          "unicode=true," n>
          "colorlinks=true," n>
          "urlcolor=blue," n>
          "linkcolor=black," n>
          "citecolor=black," n>
          "breaklinks" n
          "}")
(appendix "\\setcounter{section}{0}" n
          "\\renewcommand\\appendixname{Приложения}" n
          "\\renewcommand\\insertsectionnumber{\\Alph{section}}" n
          "\\appendix")
(begin "\\begin{" (s env) "}" n>
       r> n
       "\\end{" (s env) "}")
(frame "\\begin{frame}{" p "}" n>
       r> n
       "\\end{frame}")
(frac "\\frac{" p "}{" p "}")
(enumerate "\\begin{enumerate}" n>
           "\\item " r n
           "\\end{enumerate}")
(itemize "\\begin{itemize}" n>
         "\\item " r n
         "\\end{itemize}")
(bf "\\textbf{" r "}")
(it "\\textit{" r "}")
(appendix "\\setcounter{section}{0}" n
          "\\renewcommand\\appendixname{Приложения}" n
          "\\renewcommand\\insertsectionnumber{\\Alph{section}}" n
          "\\appendix")

lisp-mode emacs-lisp-mode

(lambda "(lambda (" p ")" n>
    r> ")")
(var "(defvar " p n>
     "\"" p "\")")
(const "(defconst " p n>
       "\"" p "\")")
(custom "(defcustom " p n>
        "\"" p "\"" n>
        ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))" n>
      "\"" p "\")")
(group "(defgroup " p " nil" n>
       "\"" p "\"" n>
       ":group '" p n>
       ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")" n>
       "\"" p "\"" n>
       r> ")")
(fun "(defun " p " (" p ")" n>
     "\"" p "\"" n>
     r> ")")
(let "(let (" p ")" n>
     r> ")")
(star "(let* (" p ")" n>
      r> ")")
(rec "(letrec (" p ")" n>
     r> ")")
(command "(defun " p " (" p ")" n>
         "\"" p "\"" n>
         "(interactive)" n>
         r> ")")

text-mode

(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str) " |" n
          "+-" (make-string (length str) ?-) "-+" n)
(rot13 (p "plain text" text) n
       "----" n
       (rot13 text))
(calc (p "taylor(sin(x),x=0,3)" formula) n
      "----" n
      (format "%s" (calc-eval formula)))

org-mode

(title "#+title: " p n
       "#+author: " p n
       "#+language: " p n n)
(quote "#+begin_quote" n>
       r> n>
       "#+end_quote")
(example "#+begin_example" n>
         r> n>
         "#+end_example")
(center "#+begin_center" n>
        r> n>
        "#+end_center")
(comment "#+begin_comment" n>
         r> n>
         "#+end_comment")
(verse "#+begin_verse" n>
       r> n>
       "#+end_verse")
(src "#+begin_src " p n>
     r> n>
     "#+end_src")
(elisp "#+begin_src emacs-lisp" n>
       r> n
       "#+end_src"
       :post (progn (tempel-done) (org-edit-src-code)))
